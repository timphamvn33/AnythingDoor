// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma" // Output folder where Prisma Client is generated
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Prisma schema file for DoorDash Clone

enum MethodType {
  CREDIT_CARD
  DEBIT_CARD
  CASH
  APPLE_PAY
  GOOGLE_PAY
  CASH_APP
  PAYPAL
}

enum PaymentStatus {
  paid
  failed
  pending
}

enum OrderStatus {
  pending
  ready
  done
  cancelled
}

enum Role {
  buyer
  admin
  driver
  restaurant_owner
}

enum DeliverStatus {
  pickup
  en_route
  delivered
  cancelled
}

model User {
  id         String       @id @default(uuid())
  name       String
  email      String       @unique
  password   String
  phone      String?
  role       Role[]       @default([buyer]) // customer, driver, admin
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  addresses  Address[] // Relationship to address
  orders     Order[] // Relationship to orders
  deliveries Delivery[]   @relation("DriverDeliveries")
  Restaurant Restaurant[]
}

model Restaurant {
  id          String     @id @default(uuid())
  name        String
  description String?
  ownerId     String
  logoUrl     String
  category    String[]
  openHrs     String
  closeHrs    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  owner       User       @relation(fields: [ownerId], references: [id])
  menuItems   MenuItem[]
  addresses   Address[]
}

model MenuItem {
  id           String      @id @default(uuid())
  name         String
  description  String?
  price        Float
  available    Boolean     @default(true)
  imgUrl       String
  category     String[]    @default([])
  restaurantId String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  orderItems   OrderItem[]
}

model Order {
  id         String      @id @default(uuid())
  userId     String
  addressId  String
  paymentId  String
  status     OrderStatus
  total      Float
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User        @relation(fields: [userId], references: [id])
  address    Address     @relation(fields: [addressId], references: [id])
  payment    Payment     @relation(fields: [paymentId], references: [id])
  orderItems OrderItem[]
  delivery   Delivery?
}

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String
  menuItemId String
  quantity   Int
  price      Float
  order      Order    @relation(fields: [orderId], references: [id])
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
}

model Address {
  id           String      @id @default(uuid())
  restaurantId String?
  userId       String
  street       String
  city         String
  state        String
  zip          String
  country      String
  user         User        @relation(fields: [userId], references: [id])
  restaurant   Restaurant? @relation(fields: [restaurantId], references: [id])

  Order Order[]
}

model Payment {
  id     String        @id @default(uuid())
  method MethodType
  amount Float
  status PaymentStatus
  paidAt DateTime      @default(now())
  orders Order[] // One payment can relate to multiple orders
}

model Delivery {
  id           String        @id @default(uuid())
  orderId      String        @unique
  driverId     String?
  status       DeliverStatus
  pickupTime   DateTime?
  deliveryTime DateTime?
  notes        String?

  order  Order @relation(fields: [orderId], references: [id])
  driver User? @relation("DriverDeliveries", fields: [driverId], references: [id])
}
